//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace Taskr.Silverlight.TaskrServices.Core {
    using System.Runtime.Serialization;
using Apprenda.SaaSGrid.WCF;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="Apprenda.Taskr")]
    public partial class Task : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private System.Nullable<System.DateTime> DueDateField;
        
        private System.Guid IdField;
        
        private Taskr.Silverlight.TaskrServices.Core.TaskPriorityDTO PriorityField;
        
        private string SubjectField;
        
        private System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Tag> TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Taskr.Silverlight.TaskrServices.Core.TaskPriorityDTO Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Tag> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskPriorityDTO", Namespace="http://schemas.datacontract.org/2004/07/Apprenda.Taskr.Service")]
    public enum TaskPriorityDTO : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="Apprenda.Taskr")]
    public partial class Tag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string LabelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:Apprenda.Taskr.Service", ConfigurationName="TaskrServices.Core.TaskrCore")]
    public interface TaskrCore {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Apprenda.Taskr.Service.SaveTask", ReplyAction="urn:Apprenda.Taskr.Service.SaveTaskReply")]
        [System.ServiceModel.FaultContractAttribute(typeof(Apprenda.SaaSGrid.Subscription.LimiterExhaustedDetail), Action="urn:Apprenda.SaaSGrid.Fault", Name="LimiterExhaustedDetail", Namespace="urn:Apprenda.SaaSGrid")]
        System.IAsyncResult BeginSaveTask(Taskr.Silverlight.TaskrServices.Core.Task task, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndSaveTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Apprenda.Taskr.Service.DeleteTask", ReplyAction="urn:Apprenda.Taskr.Service.DeleteTaskReply")]
        [System.ServiceModel.FaultContractAttribute(typeof(Apprenda.SaaSGrid.NotAuthorizedDetail), Action="urn:Apprenda.SaaSGrid.Fault", Name="NotAuthorizedDetail", Namespace="urn:Apprenda.SaaSGrid")]
        [System.ServiceModel.FaultContractAttribute(typeof(Apprenda.SaaSGrid.Subscription.LimiterExhaustedDetail), Action="urn:Apprenda.SaaSGrid.Fault", Name="LimiterExhaustedDetail", Namespace="urn:Apprenda.SaaSGrid")]
        System.IAsyncResult BeginDeleteTask(System.Guid taskId, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Apprenda.Taskr.Service.GetTask", ReplyAction="urn:Apprenda.Taskr.Service.GetTaskReply")]
        System.IAsyncResult BeginGetTask(System.Guid taskId, System.AsyncCallback callback, object asyncState);
        
        Taskr.Silverlight.TaskrServices.Core.Task EndGetTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Apprenda.Taskr.Service.ListTasks", ReplyAction="urn:Apprenda.Taskr.Service.ListTasksReply")]
        System.IAsyncResult BeginListTasks(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> EndListTasks(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface TaskrCoreChannel : Taskr.Silverlight.TaskrServices.Core.TaskrCore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Taskr.Silverlight.TaskrServices.Core.Task Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Taskr.Silverlight.TaskrServices.Core.Task)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ListTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class TaskrCoreClient : System.ServiceModel.ClientBase<Taskr.Silverlight.TaskrServices.Core.TaskrCore>, Taskr.Silverlight.TaskrServices.Core.TaskrCore {
        
        private BeginOperationDelegate onBeginSaveTaskDelegate;
        
        private EndOperationDelegate onEndSaveTaskDelegate;
        
        private System.Threading.SendOrPostCallback onSaveTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTaskDelegate;
        
        private EndOperationDelegate onEndDeleteTaskDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaskDelegate;
        
        private EndOperationDelegate onEndGetTaskDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginListTasksDelegate;
        
        private EndOperationDelegate onEndListTasksDelegate;
        
        private System.Threading.SendOrPostCallback onListTasksCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TaskrCoreClient()            
        {                        

        }
        
        public TaskrCoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskrCoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskrCoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskrCoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SaveTaskCompletedEventArgs> SaveTaskCompleted;
        
        public event System.EventHandler<DeleteTaskCompletedEventArgs> DeleteTaskCompleted;
        
        public event System.EventHandler<GetTaskCompletedEventArgs> GetTaskCompleted;
        
        public event System.EventHandler<ListTasksCompletedEventArgs> ListTasksCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Taskr.Silverlight.TaskrServices.Core.TaskrCore.BeginSaveTask(Taskr.Silverlight.TaskrServices.Core.Task task, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveTask(task, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid Taskr.Silverlight.TaskrServices.Core.TaskrCore.EndSaveTask(System.IAsyncResult result) {
            return base.Channel.EndSaveTask(result);
        }
        
        private System.IAsyncResult OnBeginSaveTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Taskr.Silverlight.TaskrServices.Core.Task task = ((Taskr.Silverlight.TaskrServices.Core.Task)(inValues[0]));
            return ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).BeginSaveTask(task, callback, asyncState);
        }
        
        private object[] OnEndSaveTask(System.IAsyncResult result) {
            System.Guid retVal = ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).EndSaveTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveTaskCompleted(object state) {
            if ((this.SaveTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveTaskCompleted(this, new SaveTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveTaskAsync(Taskr.Silverlight.TaskrServices.Core.Task task) {
            this.SaveTaskAsync(task, null);
        }
        
        public void SaveTaskAsync(Taskr.Silverlight.TaskrServices.Core.Task task, object userState) {
            if ((this.onBeginSaveTaskDelegate == null)) {
                this.onBeginSaveTaskDelegate = new BeginOperationDelegate(this.OnBeginSaveTask);
            }
            if ((this.onEndSaveTaskDelegate == null)) {
                this.onEndSaveTaskDelegate = new EndOperationDelegate(this.OnEndSaveTask);
            }
            if ((this.onSaveTaskCompletedDelegate == null)) {
                this.onSaveTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveTaskCompleted);
            }
            base.InvokeAsync(this.onBeginSaveTaskDelegate, new object[] {
                        task}, this.onEndSaveTaskDelegate, this.onSaveTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Taskr.Silverlight.TaskrServices.Core.TaskrCore.BeginDeleteTask(System.Guid taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTask(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Taskr.Silverlight.TaskrServices.Core.TaskrCore.EndDeleteTask(System.IAsyncResult result) {
            return base.Channel.EndDeleteTask(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid taskId = ((System.Guid)(inValues[0]));
            return ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).BeginDeleteTask(taskId, callback, asyncState);
        }
        
        private object[] OnEndDeleteTask(System.IAsyncResult result) {
            bool retVal = ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).EndDeleteTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTaskCompleted(object state) {
            if ((this.DeleteTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTaskCompleted(this, new DeleteTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTaskAsync(System.Guid taskId) {
            this.DeleteTaskAsync(taskId, null);
        }
        
        public void DeleteTaskAsync(System.Guid taskId, object userState) {
            if ((this.onBeginDeleteTaskDelegate == null)) {
                this.onBeginDeleteTaskDelegate = new BeginOperationDelegate(this.OnBeginDeleteTask);
            }
            if ((this.onEndDeleteTaskDelegate == null)) {
                this.onEndDeleteTaskDelegate = new EndOperationDelegate(this.OnEndDeleteTask);
            }
            if ((this.onDeleteTaskCompletedDelegate == null)) {
                this.onDeleteTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTaskCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTaskDelegate, new object[] {
                        taskId}, this.onEndDeleteTaskDelegate, this.onDeleteTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Taskr.Silverlight.TaskrServices.Core.TaskrCore.BeginGetTask(System.Guid taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTask(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Taskr.Silverlight.TaskrServices.Core.Task Taskr.Silverlight.TaskrServices.Core.TaskrCore.EndGetTask(System.IAsyncResult result) {
            return base.Channel.EndGetTask(result);
        }
        
        private System.IAsyncResult OnBeginGetTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid taskId = ((System.Guid)(inValues[0]));
            return ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).BeginGetTask(taskId, callback, asyncState);
        }
        
        private object[] OnEndGetTask(System.IAsyncResult result) {
            Taskr.Silverlight.TaskrServices.Core.Task retVal = ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).EndGetTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaskCompleted(object state) {
            if ((this.GetTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaskCompleted(this, new GetTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaskAsync(System.Guid taskId) {
            this.GetTaskAsync(taskId, null);
        }
        
        public void GetTaskAsync(System.Guid taskId, object userState) {
            if ((this.onBeginGetTaskDelegate == null)) {
                this.onBeginGetTaskDelegate = new BeginOperationDelegate(this.OnBeginGetTask);
            }
            if ((this.onEndGetTaskDelegate == null)) {
                this.onEndGetTaskDelegate = new EndOperationDelegate(this.OnEndGetTask);
            }
            if ((this.onGetTaskCompletedDelegate == null)) {
                this.onGetTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaskCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaskDelegate, new object[] {
                        taskId}, this.onEndGetTaskDelegate, this.onGetTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Taskr.Silverlight.TaskrServices.Core.TaskrCore.BeginListTasks(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListTasks(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> Taskr.Silverlight.TaskrServices.Core.TaskrCore.EndListTasks(System.IAsyncResult result) {
            return base.Channel.EndListTasks(result);
        }
        
        private System.IAsyncResult OnBeginListTasks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).BeginListTasks(callback, asyncState);
        }
        
        private object[] OnEndListTasks(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> retVal = ((Taskr.Silverlight.TaskrServices.Core.TaskrCore)(this)).EndListTasks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListTasksCompleted(object state) {
            if ((this.ListTasksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListTasksCompleted(this, new ListTasksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListTasksAsync() {
            this.ListTasksAsync(null);
        }
        
        public void ListTasksAsync(object userState) {
            if ((this.onBeginListTasksDelegate == null)) {
                this.onBeginListTasksDelegate = new BeginOperationDelegate(this.OnBeginListTasks);
            }
            if ((this.onEndListTasksDelegate == null)) {
                this.onEndListTasksDelegate = new EndOperationDelegate(this.OnEndListTasks);
            }
            if ((this.onListTasksCompletedDelegate == null)) {
                this.onListTasksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListTasksCompleted);
            }
            base.InvokeAsync(this.onBeginListTasksDelegate, null, this.onEndListTasksDelegate, this.onListTasksCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Taskr.Silverlight.TaskrServices.Core.TaskrCore CreateChannel() {
            return new TaskrCoreClientChannel(this);
        }
        
        private class TaskrCoreClientChannel : ChannelBase<Taskr.Silverlight.TaskrServices.Core.TaskrCore>, Taskr.Silverlight.TaskrServices.Core.TaskrCore {
            
            public TaskrCoreClientChannel(System.ServiceModel.ClientBase<Taskr.Silverlight.TaskrServices.Core.TaskrCore> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSaveTask(Taskr.Silverlight.TaskrServices.Core.Task task, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = task;
                System.IAsyncResult _result = base.BeginInvoke("SaveTask", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndSaveTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("SaveTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTask(System.Guid taskId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = taskId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTask", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTask(System.Guid taskId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = taskId;
                System.IAsyncResult _result = base.BeginInvoke("GetTask", _args, callback, asyncState);
                return _result;
            }
            
            public Taskr.Silverlight.TaskrServices.Core.Task EndGetTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                Taskr.Silverlight.TaskrServices.Core.Task _result = ((Taskr.Silverlight.TaskrServices.Core.Task)(base.EndInvoke("GetTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginListTasks(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ListTasks", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> EndListTasks(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task> _result = ((System.Collections.ObjectModel.ObservableCollection<Taskr.Silverlight.TaskrServices.Core.Task>)(base.EndInvoke("ListTasks", _args, result)));
                return _result;
            }
        }
    }
}
